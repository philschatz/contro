/*!
 * Contro
 * (c) 2019 Niklas Higi
 * Released under the MIT License.
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.Contro={})}(this,function(e){"use strict";class t{constructor(e=0,t=0){this.x=e,this.y=t}}const r=["left","middle","right"];const s={" ":["Space","Spacebar","Space Bar"],AltGraph:["Alt Gr"],ArrowDown:["Down"],ArrowLeft:["Left"],ArrowRight:["Right"],ArrowUp:["Up"],Backspace:["Backspace"],Control:["Ctrl","Ctl"],Delete:["Delete","Del"],Enter:["Enter","Return"],Escape:["Escape","Esc"],Insert:["Insert","Ins"],PageDown:["Page Down","PgDown"],PageUp:["Page Up","PgUp"],Tab:["Tab"]};function n(e){return 1===e.length?e.toLowerCase():(Object.keys(s).forEach(t=>{s[t].forEach(r=>{e.toLowerCase()===r.toLowerCase()&&(e=t)})}),e)}function o(e){return e in s?s[e][0]:1===e.length?e.toUpperCase():e}const i={arrows:["Arrow keys",["ArrowUp","ArrowLeft","ArrowDown","ArrowRight"]],wasd:["WASD",["W","A","S","D"]]};var T={id:"Wireless Controller (STANDARD GAMEPAD)",buttons:{ARROW_UP:12,ARROW_DOWN:13,ARROW_LEFT:14,ARROW_RIGHT:15,HOME:16,START:9,SELECT:8,CLUSTER_TOP:3,CLUSTER_LEFT:2,CLUSTER_RIGHT:1,CLUSTER_BOTTOM:0,BUMPER_TOP_LEFT:4,BUMPER_BOTTOM_LEFT:6,BUMPER_TOP_RIGHT:5,BUMPER_BOTTOM_RIGHT:7,STICK_PRESS_LEFT:10,STICK_PRESS_RIGHT:11},sticks:{LEFT:{xAxis:0,yAxis:1},RIGHT:{xAxis:2,yAxis:3}},analogs:{}};const a=[{id:"54c-9cc-Wireless Controller",buttons:{ARROW_UP:14,ARROW_DOWN:15,ARROW_LEFT:16,ARROW_RIGHT:17,HOME:12,START:9,SELECT:8,CLUSTER_TOP:3,CLUSTER_LEFT:0,CLUSTER_RIGHT:2,CLUSTER_BOTTOM:1,BUMPER_TOP_LEFT:4,BUMPER_BOTTOM_LEFT:6,BUMPER_TOP_RIGHT:5,BUMPER_BOTTOM_RIGHT:7,STICK_PRESS_LEFT:10,STICK_PRESS_RIGHT:11,TOUCHSCREEN:13},sticks:{LEFT:{xAxis:0,yAxis:1},RIGHT:{xAxis:2,yAxis:5}},analogs:{BUMPER_LEFT:3,BUMPER_RIGHT:4}},{id:"54c-268-PLAYSTATION(R)3 Controller",buttons:{ARROW_UP:4,ARROW_DOWN:6,ARROW_LEFT:7,ARROW_RIGHT:5,HOME:16,START:3,SELECT:0,CLUSTER_TOP:12,CLUSTER_LEFT:15,CLUSTER_RIGHT:13,CLUSTER_BOTTOM:14,BUMPER_TOP_LEFT:10,BUMPER_BOTTOM_LEFT:8,BUMPER_TOP_RIGHT:11,BUMPER_BOTTOM_RIGHT:9,STICK_PRESS_LEFT:1,STICK_PRESS_RIGHT:2},sticks:{LEFT:{xAxis:0,yAxis:1},RIGHT:{xAxis:2,yAxis:3}},analogs:{}},T,{id:"[temp xbox id]",buttons:{ARROW_UP:12,ARROW_DOWN:13,ARROW_LEFT:14,ARROW_RIGHT:15,HOME:16,START:9,SELECT:8,CLUSTER_TOP:3,CLUSTER_LEFT:2,CLUSTER_RIGHT:1,CLUSTER_BOTTOM:0,BUMPER_TOP_LEFT:4,BUMPER_BOTTOM_LEFT:6,BUMPER_TOP_RIGHT:5,BUMPER_BOTTOM_RIGHT:7,STICK_PRESS_LEFT:10,STICK_PRESS_RIGHT:11},sticks:{LEFT:{xAxis:0,yAxis:1},RIGHT:{xAxis:2,yAxis:3}},analogs:{}}];var d,R,E;function u(e,t){if("standard"===e.mapping)return T.buttons[t];const r=a.find(({id:t})=>e.id===t);if(!r)throw new Error(`Unsupported gamepad "${e.id}"`);return r.buttons[t]}function _(e,t){if("standard"===e.mapping)return T.sticks[t];const r=a.find(({id:t})=>e.id===t);if(!r)throw new Error(`Unsupported gamepad "${e.id}"`);return r.sticks[t]}(d=e.BUTTON_TYPE||(e.BUTTON_TYPE={})).ARROW_UP="ARROW_UP",d.ARROW_DOWN="ARROW_DOWN",d.ARROW_LEFT="ARROW_LEFT",d.ARROW_RIGHT="ARROW_RIGHT",d.HOME="HOME",d.START="START",d.SELECT="SELECT",d.CLUSTER_TOP="CLUSTER_TOP",d.CLUSTER_LEFT="CLUSTER_LEFT",d.CLUSTER_RIGHT="CLUSTER_RIGHT",d.CLUSTER_BOTTOM="CLUSTER_BOTTOM",d.BUMPER_TOP_LEFT="BUMPER_TOP_LEFT",d.BUMPER_BOTTOM_LEFT="BUMPER_BOTTOM_LEFT",d.BUMPER_TOP_RIGHT="BUMPER_TOP_RIGHT",d.BUMPER_BOTTOM_RIGHT="BUMPER_BOTTOM_RIGHT",d.STICK_PRESS_LEFT="STICK_PRESS_LEFT",d.STICK_PRESS_RIGHT="STICK_PRESS_RIGHT",d.TOUCHSCREEN="TOUCHSCREEN",(R=e.STICK_TYPE||(e.STICK_TYPE={})).LEFT="LEFT",R.RIGHT="RIGHT",function(e){e.BUMPER_LEFT="BUMPER_LEFT",e.BUMPER_RIGHT="BUMPER_RIGHT"}(E||(E={}));let p={preferGamepad:!1};e.store=p,e.Mouse=class{constructor({canvas:e,doc:r=document}){this.pointerLocked=!1,this.pointerMovement=new t,this.pressedButtons=new Set,this.queuedButtons=new Set,this.scrollDistance=0,this.canvas=e,this.document=r;const s=this.canvas.addEventListener.bind(this.canvas);s("mousedown",e=>{p.preferGamepad=!1,this.pressedButtons.add(e.button),this.queuedButtons.add(e.button)}),s("mouseup",e=>{p.preferGamepad=!1,this.pressedButtons.delete(e.button),this.queuedButtons.delete(e.button)}),s("mousemove",e=>{p.preferGamepad=!1,this.pointerMovement.x+=e.movementX,this.pointerMovement.y+=e.movementY}),s("wheel",e=>{p.preferGamepad=!1;const t=e.deltaY;this.scrollDistance+=t})}parseButton(e){if("string"==typeof e){if(r.includes(e))return r.indexOf(e);throw new Error(`There is no mouse button called "${e}"!`)}if(e<r.length)return e;throw new Error(`There is no mouse button with the index ${e}!`)}button(e){const t=this;return{label:["Left","Middle","Right"][e=this.parseButton(e)]+" Mouse Button",query(){return e=t.parseButton(e),this.hasOwnProperty("trigger")?t.pressedButtons.has(e):!!t.queuedButtons.has(e)&&(t.queuedButtons.delete(e),!0)},get trigger(){return delete this.trigger,this}}}pointer(){return{label:"Cursor",query:()=>{const e=this.pointerMovement;return this.pointerMovement=new t(0,0),e}}}wheel(){return{label:"Mouse wheel",query:()=>{const e=this.scrollDistance;return this.scrollDistance=0,e}}}lockPointer(){this.canvas.requestPointerLock()}unlockPointer(){this.document.exitPointerLock()}isPointerLocked(){return this.document.pointerLockElement===this.canvas}},e.Keyboard=class{constructor({doc:e=document}={}){this.pressedKeys=new Set,this.queuedKeys=new Set,this.document=e,this.document.addEventListener("keydown",e=>{p.preferGamepad=!1;let t=e.key;return t===t.toUpperCase()&&(t=t.toLowerCase()),this.pressedKeys.add(t),this.queuedKeys.add(t),!1}),this.document.addEventListener("keyup",e=>{p.preferGamepad=!1;let t=e.key;return t===t.toUpperCase()&&(t=t.toLowerCase()),this.pressedKeys.delete(t),this.queuedKeys.delete(t),!1})}key(e){const t=this;return{label:o(e=n(e)),query(){return this.hasOwnProperty("trigger")?t.pressedKeys.has(e):t.queuedKeys.delete(e)},get trigger(){return delete this.trigger,this}}}directionalKeys(e,r){let s;if("string"==typeof e){if(!((e=e.toLowerCase())in i))throw new Error(`Directional key template "${e}" not found!`);{const t=i[e.toLowerCase()];s=t[0],e=t[1]}}else{if(4!==e.length)throw new Error("Directional key templates have to consist of four keys!");s=(e=e.map(e=>n(e))).map(e=>o(e)).join("")}return{label:r||s,query:()=>{const r=new t;return this.key(e[0]).query()&&(r.y-=1),this.key(e[1]).query()&&(r.x-=1),this.key(e[2]).query()&&(r.y+=1),this.key(e[3]).query()&&(r.x+=1),r}}}},e.Gamepad=class{constructor({win:e=window,nav:t=navigator}={}){this.pressedButtons=new Set,this.gamepadTimestamp=0,this.window=e,this.navigator=t,this.window.addEventListener("gamepadconnected",({gamepad:e})=>{this.isConnected()||"standard"===e.mapping&&(this.gamepadIndex=e.index,p.preferGamepad=!0)}),this.window.addEventListener("gamepaddisconnected",({gamepad:e})=>{this.gamepadIndex===e.index&&(this.gamepadIndex=void 0,p.preferGamepad=!1)})}isConnected(){return void 0!==this.gamepadIndex&&this.gamepad.connected}hasButton(e){return this.isConnected()&&void 0!==u(this.gamepad.id,e)}hasStick(e){return this.isConnected()&&void 0!==_(this.gamepad.id,e)}get gamepad(){const e=this.navigator.getGamepads()[this.gamepadIndex];return e.timestamp>this.gamepadTimestamp&&(p.preferGamepad=!0),this.gamepadTimestamp=e.timestamp,e}button(e){const t=this;return{label:e,fromGamepad:!0,query(){if(!t.isConnected())return!1;const r=u(t.gamepad,e);if(this.hasOwnProperty("trigger"))return t.gamepad.buttons[r].pressed;if(t.gamepad.buttons[r].pressed){if(!t.pressedButtons.has(r))return t.pressedButtons.add(r),!0}else t.pressedButtons.delete(r);return!1},get trigger(){return delete this.trigger,this}}}stick(r){if(`${r}`!==e.STICK_TYPE.LEFT&&`${r}`!==e.STICK_TYPE.RIGHT)throw new Error(`Invalid Stick type. Expected to be "${e.STICK_TYPE.LEFT}" or "${e.STICK_TYPE.RIGHT}" but received "${r}"`);const s=this;return{label:r,query(){if(!s.isConnected())return new t(0,0);const{gamepad:e}=s,{xAxis:n,yAxis:o}=_(e,r);return new t(e.axes[n],e.axes[o])}}}},e.and=function(...e){if(e.length<2)throw new Error("Less than two controls specified!");return{label:e.map(e=>e.label).join(" + "),query:()=>{for(const t of e)if(!t.query())return!1;return!0}}},e.or=function(...e){if(e.length<2)throw new Error("Less than two controls specified!");return{get label(){return(0===e.filter(e=>e.fromGamepad).length?e[0]:p.preferGamepad?e.filter(e=>!0===e.fromGamepad)[0]:e.filter(e=>!0!==e.fromGamepad)[0]).label},query:()=>{let t;for(const r of e){const e=r.query();if(t=e,e)return e}if("boolean"==typeof t)return!1}}},Object.defineProperty(e,"__esModule",{value:!0})});